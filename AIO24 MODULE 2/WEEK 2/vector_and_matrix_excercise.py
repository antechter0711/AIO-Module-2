# -*- coding: utf-8 -*-
"""Vector and Matrix Excercise

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n5DhFgM--e40plTss-wnjPoeWn8U3qIa
"""

import numpy as np

def compute_vector_length(vector):
  """
  Computes the length (magnitude) of a vector.

  Args:
    vector: A NumPy array representing the vector.

  Returns:
    The length of the vector.
  """
  return np.linalg.norm(vector)

vector = np.array([-2, 4, 9, 21])
result = compute_vector_length(vector)  # Pass the vector directly, not as a list
print(round(result, 2))

import numpy as np


def compute_dot_product(v1, v2):  # Define the missing function
  """
  Computes the dot product of two vectors.

  Args:
    v1: The first NumPy array.
    v2: The second NumPy array.

  Returns:
    The dot product of v1 and v2.
  """
  return np.dot(v1, v2)

v1 = np.array([0, 1, -1, 2])
v2 = np.array([2, 5, 1, 0])
result = compute_dot_product(v1, v2)  # Call the newly defined function
print(round(result, 2))

x = np. array ([[1 , 2] ,
[3 , 4]])
k = np. array ([1 , 2])
print ("result \n", x.dot (k) )

x = np. array ([[ -1 , 2] ,
[3 , -4]])
k = np. array ([1 , 2])
print ('result \n', x@k )

import numpy as np

def matrix_multi_vector(matrix, vector):
  """
  Multiplies a matrix by a vector.

  Args:
    matrix: A NumPy array representing the matrix.
    vector: A NumPy array representing the vector.

  Returns:
    The result of the matrix-vector multiplication.
  """
  return np.dot(matrix, vector)

m = np.array([[-1, 1, 1], [0, -4, 9]])
v = np.array([0, 2, 1])
result = matrix_multi_vector(m, v) # Call the newly defined function
print(result)

import numpy as np

def matrix_multi_matrix(matrix1, matrix2):
  """
  Multiplies two matrices.

  Args:
    matrix1: A NumPy array representing the first matrix.
    matrix2: A NumPy array representing the second matrix.

  Returns:
    The result of the matrix-matrix multiplication.
  """
  return np.dot(matrix1, matrix2) # Use np.dot to perform matrix multiplication

m1 = np. array ([[0 , 1 , 2] , [2 , -3 , 1]])
m2 = np. array ([[1 , -3] ,[6 , 1] , [0 , -1]])
result = matrix_multi_matrix(m1 , m2) # Call the newly defined function
print ( result )

m1 = np.eye (3)
m2 = np. array ([[1 , 1 , 1] ,[2 , 2 , 2] , [3 , 3 , 3]])
result = m1@m2
print ( result )

m1 = np.eye (2)
m1 = np. reshape (m1 ,( -1 ,4) ) [0]
m2 = np. array ([[1 , 1 , 1 , 1] ,[2 , 2 , 2 , 2] , [3 , 3 , 3 , 3] , [4 , 4 , 4 , 4]])
result = m1@m2
print ( result )

m1 = np. array ([[1 , 2] , [3 , 4]])
m1 = np. reshape (m1 ,( -1 ,4) , "F") [0]
m2 = np. array ([[1 , 1 , 1 , 1] ,[2 , 2 , 2 , 2] , [3 , 3 , 3 , 3] , [4 , 4 , 4 , 4]])
result = m1@m2
print ( result )

import numpy as np

def inverse_matrix(matrix):
  """
  Calculates the inverse of a matrix.

  Args:
    matrix: A NumPy array representing the matrix.

  Returns:
    The inverse of the matrix, if it exists.
  """
  try:
    return np.linalg.inv(matrix)  # Use np.linalg.inv to calculate the inverse
  except np.linalg.LinAlgError:
    return "Matrix is not invertible."

m1 = np.array([[-2, 6], [8, -4]])
result = inverse_matrix(m1)  # Call the newly defined function
print(result)

import numpy as np

def compute_eigenvalues_eigenvectors(matrix):
  """
  Computes eigenvalues and eigenvectors of a matrix.

  Args:
    matrix: A NumPy array representing the matrix.

  Returns:
    A tuple containing eigenvalues and eigenvectors.
  """
  eigenvalues, eigenvectors = np.linalg.eig(matrix)
  return eigenvalues, eigenvectors

matrix = np.array([[0.9, 0.2], [0.1, 0.8]])
eigenvalues, eigenvectors = compute_eigenvalues_eigenvectors(matrix) # Call the newly defined function
print(eigenvectors)

import numpy as np

def compute_cosine(x, y):
  """
  Computes the cosine similarity between two vectors.

  Args:
    x: The first vector.
    y: The second vector.

  Returns:
    The cosine similarity between x and y.
  """
  return np.dot(x, y) / (np.linalg.norm(x) * np.linalg.norm(y))

x = np.array([1, 2, 3, 4])
y = np.array([1, 0, 3, 0])
result = compute_cosine(x, y)  # Call the newly defined function
print(round(result, 3))