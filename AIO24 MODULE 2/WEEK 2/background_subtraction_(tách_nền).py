# -*- coding: utf-8 -*-
"""Background subtraction (tách nền)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vJ9DgMTZyc6SvzeX4NS5ApXVc4zUEoWS
"""

import numpy as np
def compute_vector_length (vector):
  return np.linalg.norm(vector)

def compute_dot_product (vector1, vector2):
  return np.dot(vector1, vector2)

def matrix_multi_vecotr (matrix, vector):
  return np.dot(matrix, vector)

import numpy as np
def matrix_multi_matrix (matrix1, matrix2):
  return np.dot(matrix1, matrix2)

import numpy as np
def matrix_inverse (matrix):
  return np.linalg.inv(matrix)

def compute_eign_values (matrix):
  return np.linalg.eig(matrix)

def compute_eigenvalues_eigenvectors(matrix):
  """
  Computes eigenvalues and eigenvectors of a matrix.

  Args:
    matrix: A NumPy array representing the matrix.

  Returns:
    A tuple containing eigenvalues and eigenvectors.
  """
  eigenvalues, eigenvectors = np.linalg.eig(matrix)
  return eigenvalues, eigenvectors

import numpy as np

def compute_cosine(x, y):
  """
  Computes the cosine similarity between two vectors.

  Args:
    x: The first vector.
    y: The second vector.

  Returns:
    The cosine similarity between x and y.
  """
  return np.dot(x, y) / (np.linalg.norm(x) * np.linalg.norm(y))

"""4. Background subtraction (tách nền):"""

import numpy as np
from google . colab . patches import cv2_imshow
import cv2

bg1_image = cv2. imread ("/content/GreenBackground.png", 1)
bg1_image = cv2. resize ( bg1_image , (678 , 381) )

ob_image = cv2 . imread ("/content/Object.png", 1)
ob_image = cv2 . resize ( ob_image , (678 , 381) )

bg2_image = cv2. imread ( "/content/NewBackground.jpg", 1)
bg2_image = cv2. resize ( bg2_image , (678 , 381) )

cv2_imshow(bg1_image)
cv2_imshow(ob_image)
cv2_imshow(bg2_image)

import cv2
def compute_difference ( bg_img , input_img ) :
    # Calculate the absolute difference between images
    difference_single_channel = cv2.absdiff( bg_img , input_img )
    return difference_single_channel
bg_image = bg2_image
input_image = ob_image
difference_single_channel = compute_difference ( bg1_image , ob_image )
cv2_imshow ( difference_single_channel )

import cv2
def compute_binary_mask ( difference_single_channel ) :
  # You need to provide two arrays to cv2.bitwise_and.
  # Assuming you want to create a binary mask based on a threshold,
  # you can compare the difference image with a threshold value.
  _, difference_binary = cv2.threshold(difference_single_channel, 100, 255, cv2.THRESH_BINARY)
  return difference_binary
difference_binary = compute_binary_mask ( difference_single_channel )
cv2_imshow ( difference_binary )

import cv2
import numpy as np
def replace_background ( bg1_image , bg2_image , ob_image ) :
    difference_single_channel = compute_difference (
    bg1_image ,
    ob_image
            )

    binary_mask = compute_binary_mask ( difference_single_channel )
    output = np. where ( binary_mask == 255 , ob_image , bg2_image )

    return output

output = replace_background ( bg1_image , bg2_image , ob_image )
cv2_imshow ( output )